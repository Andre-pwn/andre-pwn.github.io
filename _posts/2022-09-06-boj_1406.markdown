---
title: "[BOJ] 에디터 - 1406 (S2)
)"
author: kwon
date: 2022-9-6T14:00:00 +0900
categories: [boj, silver]
tags: [data structure, stack, linked list]
math: true
mermaid: false
---

| 시간 제한 | 메모리 제한 |
| --- | --- |
| 0.3 | 512 |

# 문제

한 줄로 된 간단한 에디터를 구현하려고 한다. 이 편집기는 영어 소문자만을 기록할 수 있는 편집기로, 최대 600,000글자까지 입력할 수 있다.

이 편집기에는 '커서'라는 것이 있는데, 커서는 문장의 맨 앞(첫 번째 문자의 왼쪽), 문장의 맨 뒤(마지막 문자의 오른쪽), 또는 문장 중간 임의의 곳(모든 연속된 두 문자 사이)에 위치할 수 있다. 즉 길이가 L인 문자열이 현재 편집기에 입력되어 있으면, 커서가 위치할 수 있는 곳은 L+1가지 경우가 있다.

이 편집기가 지원하는 명령어는 다음과 같다.

| L | 커서를 왼쪽으로 한 칸 옮김 (커서가 문장의 맨 앞이면 무시됨) |
| --- | --- |
| D | 커서를 오른쪽으로 한 칸 옮김 (커서가 문장의 맨 뒤이면 무시됨) |
| B | 커서 왼쪽에 있는 문자를 삭제함 (커서가 문장의 맨 앞이면 무시됨)삭제로 인해 커서는 한 칸 왼쪽으로 이동한 것처럼 나타나지만, 실제로 커서의 오른쪽에 있던 문자는 그대로임 |
| P $ | $라는 문자를 커서 왼쪽에 추가함 |

초기에 편집기에 입력되어 있는 문자열이 주어지고, 그 이후 입력한 명령어가 차례로 주어졌을 때, 모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 구하는 프로그램을 작성하시오. 단, 명령어가 수행되기 전에 커서는 문장의 맨 뒤에 위치하고 있다고 한다.

# 입력

첫째 줄에는 초기에 편집기에 입력되어 있는 문자열이 주어진다. 이 문자열은 길이가 N이고, 영어 소문자로만 이루어져 있으며, 길이는 100,000을 넘지 않는다. 둘째 줄에는 입력할 명령어의 개수를 나타내는 정수 M(1 ≤ M ≤ 500,000)이 주어진다. 셋째 줄부터 M개의 줄에 걸쳐 입력할 명령어가 순서대로 주어진다. 명령어는 위의 네 가지 중 하나의 형태로만 주어진다.

# 출력

첫째 줄에 모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 출력한다.

# 풀이

커서를 움직이거나 기준으로 문자를 삭제/추가하는 명령을 수행해야 한다. 이를 위해 커서를 인덱스 값으로 두고 구현할 수도 있겠지만 stack의 관점으로 본다면 조금 더 편하게 문제를 해결할 수 있다.

![](/posting_imgs/boj_1406-1.png)

위 그림과 같이 커서를 중심으로 양 쪽의 문자열들을 스택으로 생각하면 문제에서 주어진 4 개의 명령어를 수행하기 편해진다. 단, 여기서 스택의 가장 위를 커서가 있는 방향으로 생각한다. 즉, 왼쪽 스택은 오른쪽이 스택의 위쪽이며 오른쪽 스택은 왼쪽이 스택의 위쪽이 된다.

먼저, 커서를 옮기는 경우에는 한 쪽의 스택의 가장 위에 있는 문자열을 반대쪽 스택으로 넣어주면 된다. 

![](/posting_imgs/boj_1406-2.png)

예를 들어 **D** 명령을 통해 커서를 오른쪽으로 옮길 때 위 그림처럼 오른쪽 스택의 가장 위에 있는 f를 빼서 왼쪽 스택으로 넣어주면 커서를 오른쪽으로 움직이는 것과 같은 효과를 볼 수 있다.

삭제 명령은 커서가 맨 앞에 있는 경우를 제외하면 항상 왼쪽 스택의 문자를 하나씩 삭제하면 되며, 삽입 명령은 항상 왼쪽 스택에 삽입하려는 문자를 넣어주면 된다.

## 코드

```python
import sys

input = sys.stdin.readline

left = list(input().rstrip())
right = []

for _ in range(int(input())):
    com = (list(input().split()))
    if com[0] == 'L':
        if left:
            right.append(left.pop())
            
    elif com[0] == 'D':
        if right:
            left.append(right.pop())
            
    elif com[0] == 'B':
        if left:
            left.pop()
            
    elif com[0] == 'P':
        left.append(com[1])

print(''.join(left+right[::-1]))
```

python에서는 list의 `pop()` 함수로 스택에서 꺼내고, `append()` 함수로 스택에 값을 넣는 것으로 stack을 간단하게 구현할 수 있다.